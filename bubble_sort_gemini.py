# some of this code has been generated by Google's AI assistant, Gemini AI 

import random
import time

def array_gen(size):
    arr = [0] * size
    for index in range (0, size):
        arr[index] = random.randint(0, size)
    return arr

def bubble_sort(arr):
    for out in range (len(arr)):
        for inside in range (0, len(arr) - out - 1):
            if arr[inside] > arr[inside + 1] : 
                temp = arr[inside]
                arr[inside] = arr[inside + 1]
                arr[inside + 1] = temp
    return arr

# this is gemini's version of a bubble sort
def optimized_bubble_sort(data):
    """
    Sorts a list of items using an optimized Bubble Sort algorithm.

    Args:
        data: A list of comparable items.

    Returns:
        The sorted list.
    """
    n = len(data)
    # The outer loop iterates through the list, reducing the unsorted part
    for i in range(n):
        # A flag to check if any swaps were made in this pass
        swapped = False
        # The inner loop performs the bubble sort pass
        # The number of comparisons decreases with each outer loop iteration
        for j in range(0, n - i - 1):
            # Compare adjacent elements
            if data[j] > data[j + 1]:
                # Swap the elements if they are in the wrong order
                data[j], data[j + 1] = data[j + 1], data[j]
                swapped = True
        # If no swaps were made in the inner loop, the list is sorted
        if not swapped:
            break
    return data

def print_array(arr):
    for index in range (0, len(arr)):
        print(arr[index], ", ")

arr_short = array_gen(10)
arr_medium = array_gen(100)
arr_large = array_gen(1000)

print("short array")
print_array(arr_short)
before_time = time.time()
optimized_bubble_sort(arr_short)
current_time = time.time()
print_array(arr_short)
print("time taken: ",  current_time - before_time)

print("medium array")
print_array(arr_medium)
before_time = time.time()
optimized_bubble_sort(arr_medium)
current_time = time.time()
print_array(arr_medium)
print("time taken: ",  current_time - before_time)

print("large array")
print_array(arr_large)
before_time = time.time()
optimized_bubble_sort(arr_large)
current_time = time.time()
print_array(arr_large)
print("time taken: ",  current_time - before_time)